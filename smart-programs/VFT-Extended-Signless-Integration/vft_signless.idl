type Config = struct {
  gas_to_delete_session: u64,
  minimum_session_duration_ms: u64,
  ms_per_block: u64,
};

type SignatureData = struct {
  key: actor_id,
  duration: u64,
  allowed_actions: vec ActionsForSession,
};

type ActionsForSession = enum {
  Mint,
  Burn,
  Approve,
  GrantAdmin,
  GrantMinter,
  GrantBurner,
  RevokeAdmin,
  RevokeMinter,
  RevokeBurner,
};

type SessionData = struct {
  key: actor_id,
  expires: u64,
  allowed_actions: vec ActionsForSession,
  expires_at_block: u32,
};

constructor {
  New : (name: str, symbol: str, decimals: u8, config: Config);
};

service Service {
  Approve : (spender: actor_id, value: u256, session_for_account: opt actor_id) -> null;
  Burn : (from: actor_id, value: u256, session_for_account: opt actor_id) -> bool;
  GrantAdminRole : (to: actor_id, session_for_account: opt actor_id) -> null;
  GrantBurnerRole : (to: actor_id, session_for_account: opt actor_id) -> null;
  GrantMinterRole : (to: actor_id, session_for_account: opt actor_id) -> null;
  Mint : (to: actor_id, value: u256, session_for_account: opt actor_id) -> bool;
  RevokeAdminRole : (from: actor_id, session_for_account: opt actor_id) -> null;
  RevokeBurnerRole : (from: actor_id, session_for_account: opt actor_id) -> null;
  RevokeMinterRole : (from: actor_id, session_for_account: opt actor_id) -> null;
  Transfer : (to: actor_id, value: u256) -> bool;
  TransferFrom : (from: actor_id, to: actor_id, value: u256) -> bool;
  query Admins : () -> vec actor_id;
  query Burners : () -> vec actor_id;
  query Minters : () -> vec actor_id;
  query Allowance : (owner: actor_id, spender: actor_id) -> u256;
  query BalanceOf : (account: actor_id) -> u256;
  query Decimals : () -> u8;
  query Name : () -> str;
  query Symbol : () -> str;
  query TotalSupply : () -> u256;

  events {
    Minted: struct {
      to: actor_id,
      value: u256,
    };
    Burned: struct {
      from: actor_id,
      value: u256,
    };
    Approval: struct {
      owner: actor_id,
      spender: actor_id,
      value: u256,
    };
    Transfer: struct {
      from: actor_id,
      to: actor_id,
      value: u256,
    };
  }
};

service Session {
  CreateSession : (signature_data: SignatureData, signature: opt vec u8) -> null;
  DeleteSessionFromAccount : () -> null;
  DeleteSessionFromProgram : (session_for_account: actor_id) -> null;
  query SessionForTheAccount : (account: actor_id) -> opt SessionData;
  query Sessions : () -> vec struct { actor_id, SessionData };

  events {
    SessionCreated;
    SessionDeleted;
  }
};

